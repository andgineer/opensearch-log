{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"opensearch-log","text":"<p>opensearch-log is a Python logging handler for direct and efficient log transmission to OpenSearch or AWS CloudWatch.</p> <p>It can also be used for local JSON logging to stdout.</p> <p>Utilizing a context manager or function decorator, additional fields can be seamlessly added to log messages.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -e \".[cloudwatch,opensearch]\"\n</code></pre> <p>If you need only CloudWatch or OpenSearch corresponding extras should be installed. For just JSON logging to stdout, no extras are required.</p>"},{"location":"#setup-logger","title":"Setup logger","text":"<p>To configure the logger globally, utilize the appropriate <code>get_logger</code> function based on your logging destination.</p> <p>This function not only returns a customized logger but also configures the default logger, ensuring that subsequent calls to <code>logging.getLogger()</code> yield the same logger instance.</p>"},{"location":"#sending-logs-to-opensearch","title":"Sending logs to OpenSearch","text":"<p>For logging to OpenSearch, the setup involves the get_logger() from opensearch_handler: <pre><code>import opensearch_log.opensearch_handler\nfrom opensearch_log import Logging\nfrom opensearch_log.opensearch_handler import get_logger\n\nlogger = get_logger(index_name=\"myindex\", echo_stdout=True)\nwith Logging(my_log_field=\"From Python\"):\n    logger.info(\"Hello World\")\n</code></pre></p> <p>This will transmit a log entry to OpenSearch that looks like this (output cleaned for readability): <pre><code>{\n  \"_index\": \"myindex-2023.12.16\",\n  \"_source\": {\n    \"@timestamp\": \"2023-12-16T06:39:19.479Z\",\n    \"msg\": \"Hello World\",\n    \"my_log_field\": \"From Python\"\n  }\n}\n</code></pre></p> <p>Simultaneously, it will print the following on the terminal (output cleaned for readability): <pre><code>{\n  \"message\": \"Hello World\",\n  \"name\": \"root\",\n  \"my_log_field\": \"From Python\"\n}\n</code></pre></p>"},{"location":"#sending-logs-to-aws-cloudwatch","title":"Sending logs to AWS CloudWatch","text":"<p>For logging to AWS CloudWatch, the setup involves the get_logger() from cloudwatch_handler:</p> <pre><code>from opensearch_log.cloudwatch_handler import get_logger\n\nlogger = get_logger(index_name=\"myindex\", echo_stdout=True)\n</code></pre>"},{"location":"#json-logging-to-stdout","title":"JSON logging to stdout","text":"<p>For applications requiring only JSON logging without the need to transmit logs to OpenSearch or AWS CloudWatch, use get_logger() from stdout_handler:</p> <pre><code>from opensearch_log.stdout_handler import get_logger\n\nlogger = get_logger(index_name=\"myindex\", echo_stdout=True)\n</code></pre>"},{"location":"#adding-fields-to-logs","title":"Adding fields to logs","text":"<p>Enhancing logs with additional fields can be accomplished using a function decorator, context manager, or straightforward function calls.</p> <p>Once applied, these fields will be included in all emitted log messages.</p>"},{"location":"#context-manager","title":"Context manager","text":"<pre><code>from opensearch_log import Logging\n\nwith Logging(my_log_field=\"From Python\"):\n    logger.info(\"Hello World\")\n</code></pre>"},{"location":"#function-decorator","title":"Function decorator","text":"<pre><code>from opensearch_log import log_fields\n\n@log_fields(my_log_field=\"From Python\")\ndef my_func():\n    logger.info(\"Hello World\")\n</code></pre>"},{"location":"#simple-functions","title":"Simple functions","text":"<pre><code>from opensearch_log import add_log_fields, remove_log_fields\n\nadded_fields = add_log_fields(my_log_field=\"From Python\")\ntry:\n    logger.info(\"Hello World\")\nfinally:\n    remove_log_fields(*added_fields)\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#opensearch_log","title":"opensearch_log","text":"<p>A Python logging handler for efficient and reliable direct log transmission to OpenSearch.</p>"},{"location":"reference/#opensearch_log-attributes","title":"Attributes","text":""},{"location":"reference/#opensearch_log.urllib3_logger","title":"opensearch_log.urllib3_logger  <code>module-attribute</code>","text":"<pre><code>urllib3_logger = getLogger('opensearch')\n</code></pre>"},{"location":"reference/#opensearch_log-classes","title":"Classes","text":""},{"location":"reference/#opensearch_log.Logging","title":"opensearch_log.Logging","text":"<p>Context manager to add fields to log records.</p>"},{"location":"reference/#opensearch_log.Logging-attributes","title":"Attributes","text":""},{"location":"reference/#opensearch_log.Logging.added_fields","title":"opensearch_log.Logging.added_fields  <code>instance-attribute</code>","text":"<pre><code>added_fields: list[str] = []\n</code></pre>"},{"location":"reference/#opensearch_log.Logging.values","title":"opensearch_log.Logging.values  <code>instance-attribute</code>","text":"<pre><code>values = values\n</code></pre>"},{"location":"reference/#opensearch_log-functions","title":"Functions","text":""},{"location":"reference/#opensearch_log.add_log_fields","title":"opensearch_log.add_log_fields","text":"<pre><code>add_log_fields(**values: Any) -&gt; list[str]\n</code></pre> <p>Include fields to all log records.</p>"},{"location":"reference/#opensearch_log.log_fields","title":"opensearch_log.log_fields","text":"<pre><code>log_fields(func: Optional[Any] = None, **values: Any) -&gt; Any\n</code></pre> <p>Decorate to include fields <code>values</code> to all log records.</p>"},{"location":"reference/#opensearch_log.remove_log_fields","title":"opensearch_log.remove_log_fields","text":"<pre><code>remove_log_fields(*fields: str) -&gt; None\n</code></pre> <p>Remove logged fields.</p>"},{"location":"reference/#opensearch_log-modules","title":"Modules","text":""},{"location":"reference/#opensearch_log.base_handler","title":"opensearch_log.base_handler","text":"<p>Base logger for structured logging.</p>"},{"location":"reference/#opensearch_log.base_handler-classes","title":"Classes","text":""},{"location":"reference/#opensearch_log.base_handler.BaseHandler","title":"opensearch_log.base_handler.BaseHandler","text":"<p>             Bases: <code>Handler</code></p> <p>Abstract base handler for structured logging.</p> Functions <code></code> opensearch_log.base_handler.BaseHandler.emit <pre><code>emit(record: LogRecord) -&gt; None\n</code></pre> <p>Emit a logging record in a processed format.</p> <code></code> opensearch_log.base_handler.BaseHandler.send_message <pre><code>send_message(message: Optional[str], record: LogRecord) -&gt; None\n</code></pre> <p>Send the log message. This method should be implemented by subclasses.</p>"},{"location":"reference/#opensearch_log.cloudwatch_handler","title":"opensearch_log.cloudwatch_handler","text":"<p>Structured logger that sends logs to AWS CloudWatch.</p>"},{"location":"reference/#opensearch_log.cloudwatch_handler-attributes","title":"Attributes","text":""},{"location":"reference/#opensearch_log.cloudwatch_handler.BUFFER_SIZE","title":"opensearch_log.cloudwatch_handler.BUFFER_SIZE  <code>module-attribute</code>","text":"<pre><code>BUFFER_SIZE = 100\n</code></pre>"},{"location":"reference/#opensearch_log.cloudwatch_handler.FLUSH_SECONDS","title":"opensearch_log.cloudwatch_handler.FLUSH_SECONDS  <code>module-attribute</code>","text":"<pre><code>FLUSH_SECONDS = 3.0\n</code></pre>"},{"location":"reference/#opensearch_log.cloudwatch_handler.RETRY_NUM","title":"opensearch_log.cloudwatch_handler.RETRY_NUM  <code>module-attribute</code>","text":"<pre><code>RETRY_NUM = 3\n</code></pre>"},{"location":"reference/#opensearch_log.cloudwatch_handler-classes","title":"Classes","text":""},{"location":"reference/#opensearch_log.cloudwatch_handler.CloudwatchHandler","title":"opensearch_log.cloudwatch_handler.CloudwatchHandler","text":"<p>             Bases: <code>BaseHandler</code></p> <p>Handler that sends log records to AWS CloudWatch.</p> Attributes <code></code> opensearch_log.cloudwatch_handler.CloudwatchHandler.buffer_size <code>instance-attribute</code> <pre><code>buffer_size = BUFFER_SIZE\n</code></pre> <code></code> opensearch_log.cloudwatch_handler.CloudwatchHandler.flush_seconds <code>instance-attribute</code> <pre><code>flush_seconds = FLUSH_SECONDS\n</code></pre> <code></code> opensearch_log.cloudwatch_handler.CloudwatchHandler.log_client <code>property</code> <pre><code>log_client: client\n</code></pre> <p>Get the boto3 client for CloudWatch logs.</p> <code></code> opensearch_log.cloudwatch_handler.CloudwatchHandler.log_group <code>instance-attribute</code> <pre><code>log_group = log_group\n</code></pre> <code></code> opensearch_log.cloudwatch_handler.CloudwatchHandler.log_stream <code>instance-attribute</code> <pre><code>log_stream = log_stream\n</code></pre> Functions <code></code> opensearch_log.cloudwatch_handler.CloudwatchHandler.close <pre><code>close() -&gt; None\n</code></pre> <p>Flush the buffer and release any outstanding resource.</p> <code></code> opensearch_log.cloudwatch_handler.CloudwatchHandler.flush <pre><code>flush() -&gt; None\n</code></pre> <p>Flush the buffer to CloudWatch.</p> <p>Could run from Timer's thread or from the main thread. So we should not use json_formatter's routines that access ThreadLocal variables.</p> <code></code> opensearch_log.cloudwatch_handler.CloudwatchHandler.send_message <pre><code>send_message(message: Optional[str], record: LogRecord) -&gt; None\n</code></pre> <p>Buffer the log message and flush if necessary.</p>"},{"location":"reference/#opensearch_log.cloudwatch_handler-functions","title":"Functions","text":""},{"location":"reference/#opensearch_log.cloudwatch_handler.get_logger","title":"opensearch_log.cloudwatch_handler.get_logger","text":"<pre><code>get_logger(*args: Any, echo_stdout: bool = False, log_group: str, log_stream: str, log_handler: Optional[BaseHandler] = None, **kwargs: Any) -&gt; Logger\n</code></pre> <p>Create a logger that stream logs to CloudWatch.</p>"},{"location":"reference/#opensearch_log.cloudwatch_handler-modules","title":"Modules","text":""},{"location":"reference/#opensearch_log.json_log","title":"opensearch_log.json_log","text":"<p>JSON logging.</p>"},{"location":"reference/#opensearch_log.json_log-classes","title":"Classes","text":""},{"location":"reference/#opensearch_log.json_log.Logging","title":"opensearch_log.json_log.Logging","text":"<p>Context manager to add fields to log records.</p> Attributes opensearch_log.json_log.Logging.added_fields <code>instance-attribute</code> <pre><code>added_fields: list[str] = []\n</code></pre> <code></code> opensearch_log.json_log.Logging.values <code>instance-attribute</code> <pre><code>values = values\n</code></pre>"},{"location":"reference/#opensearch_log.json_log-functions","title":"Functions","text":""},{"location":"reference/#opensearch_log.json_log.add_log_fields","title":"opensearch_log.json_log.add_log_fields","text":"<pre><code>add_log_fields(**values: Any) -&gt; list[str]\n</code></pre> <p>Include fields to all log records.</p>"},{"location":"reference/#opensearch_log.json_log.create_logger","title":"opensearch_log.json_log.create_logger","text":"<pre><code>create_logger(log_handler_instance: BaseHandler, level: int, clear_handlers: bool = False) -&gt; Logger\n</code></pre> <p>Create a logger that stream logs in JSON format with additional fields.</p>"},{"location":"reference/#opensearch_log.json_log.get_json_formatter","title":"opensearch_log.json_log.get_json_formatter","text":"<pre><code>get_json_formatter() -&gt; JsonFormatter\n</code></pre> <p>Get a JSON formatter.</p>"},{"location":"reference/#opensearch_log.json_log.get_logger","title":"opensearch_log.json_log.get_logger","text":"<pre><code>get_logger(application: Optional[str] = sys.argv[0], *, log_handler: BaseHandler, level: int = logging.INFO, clear_handlers: bool = False, **values: Any) -&gt; Logger\n</code></pre> <p>Get a JSON logger.</p>"},{"location":"reference/#opensearch_log.json_log.log_fields","title":"opensearch_log.json_log.log_fields","text":"<pre><code>log_fields(func: Optional[Any] = None, **values: Any) -&gt; Any\n</code></pre> <p>Decorate to include fields <code>values</code> to all log records.</p>"},{"location":"reference/#opensearch_log.json_log.remove_handlers","title":"opensearch_log.json_log.remove_handlers","text":"<pre><code>remove_handlers(_logger: Logger) -&gt; None\n</code></pre> <p>Remove any default handlers.</p>"},{"location":"reference/#opensearch_log.json_log.remove_log_fields","title":"opensearch_log.json_log.remove_log_fields","text":"<pre><code>remove_log_fields(*fields: str) -&gt; None\n</code></pre> <p>Remove logged fields.</p>"},{"location":"reference/#opensearch_log.json_log.replace_logger_fields","title":"opensearch_log.json_log.replace_logger_fields","text":"<pre><code>replace_logger_fields(fields_to_log: dict[str, Any]) -&gt; None\n</code></pre> <p>Update logger with new fields to log.</p>"},{"location":"reference/#opensearch_log.json_log.set_record_factory","title":"opensearch_log.json_log.set_record_factory","text":"<pre><code>set_record_factory() -&gt; None\n</code></pre> <p>Set a log record factory.</p>"},{"location":"reference/#opensearch_log.opensearch_handler","title":"opensearch_log.opensearch_handler","text":"<p>Structured logger that sends logs to AWS OpenSearch.</p>"},{"location":"reference/#opensearch_log.opensearch_handler-attributes","title":"Attributes","text":""},{"location":"reference/#opensearch_log.opensearch_handler.BUFFER_SIZE","title":"opensearch_log.opensearch_handler.BUFFER_SIZE  <code>module-attribute</code>","text":"<pre><code>BUFFER_SIZE = 200\n</code></pre>"},{"location":"reference/#opensearch_log.opensearch_handler.BULK_SIZE","title":"opensearch_log.opensearch_handler.BULK_SIZE  <code>module-attribute</code>","text":"<pre><code>BULK_SIZE = 15\n</code></pre>"},{"location":"reference/#opensearch_log.opensearch_handler.DEFAULT_INDEX_NAME","title":"opensearch_log.opensearch_handler.DEFAULT_INDEX_NAME  <code>module-attribute</code>","text":"<pre><code>DEFAULT_INDEX_NAME = 'myindex'\n</code></pre>"},{"location":"reference/#opensearch_log.opensearch_handler.DEFAULT_OPENSEARCH_HOST","title":"opensearch_log.opensearch_handler.DEFAULT_OPENSEARCH_HOST  <code>module-attribute</code>","text":"<pre><code>DEFAULT_OPENSEARCH_HOST = 'localhost'\n</code></pre>"},{"location":"reference/#opensearch_log.opensearch_handler.FLUSH_SECONDS","title":"opensearch_log.opensearch_handler.FLUSH_SECONDS  <code>module-attribute</code>","text":"<pre><code>FLUSH_SECONDS = 0.8\n</code></pre>"},{"location":"reference/#opensearch_log.opensearch_handler.IGNORED_LOG_RECORD_FIELDS","title":"opensearch_log.opensearch_handler.IGNORED_LOG_RECORD_FIELDS  <code>module-attribute</code>","text":"<pre><code>IGNORED_LOG_RECORD_FIELDS = ['args', 'levelno', 'pathname', 'relativeCreated', 'msecs', 'exc_text']\n</code></pre>"},{"location":"reference/#opensearch_log.opensearch_handler.INDEX_DATE_FORMAT","title":"opensearch_log.opensearch_handler.INDEX_DATE_FORMAT  <code>module-attribute</code>","text":"<pre><code>INDEX_DATE_FORMAT = '%Y.%m.%d'\n</code></pre>"},{"location":"reference/#opensearch_log.opensearch_handler.RETRY_NUM","title":"opensearch_log.opensearch_handler.RETRY_NUM  <code>module-attribute</code>","text":"<pre><code>RETRY_NUM = 3\n</code></pre>"},{"location":"reference/#opensearch_log.opensearch_handler.logger","title":"opensearch_log.opensearch_handler.logger  <code>module-attribute</code>","text":"<pre><code>logger = get_logger(echo_stdout=True)\n</code></pre>"},{"location":"reference/#opensearch_log.opensearch_handler-classes","title":"Classes","text":""},{"location":"reference/#opensearch_log.opensearch_handler.IndexRotation","title":"opensearch_log.opensearch_handler.IndexRotation","text":"<p>             Bases: <code>Enum</code></p> <p>Index rotation frequency.</p> Attributes <code></code> opensearch_log.opensearch_handler.IndexRotation.DAILY <code>class-attribute</code> <code>instance-attribute</code> <pre><code>DAILY = 0\n</code></pre> <code></code> opensearch_log.opensearch_handler.IndexRotation.MONTHLY <code>class-attribute</code> <code>instance-attribute</code> <pre><code>MONTHLY = 10\n</code></pre>"},{"location":"reference/#opensearch_log.opensearch_handler.OpensearchHandler","title":"opensearch_log.opensearch_handler.OpensearchHandler","text":"<p>             Bases: <code>BaseHandler</code></p> <p>Handler to send log records to AWS OpenSearch.</p> Attributes <code></code> opensearch_log.opensearch_handler.OpensearchHandler.DAILY <code>class-attribute</code> <code>instance-attribute</code> <pre><code>DAILY = DAILY\n</code></pre> <code></code> opensearch_log.opensearch_handler.OpensearchHandler.MONTHLY <code>class-attribute</code> <code>instance-attribute</code> <pre><code>MONTHLY = MONTHLY\n</code></pre> <code></code> opensearch_log.opensearch_handler.OpensearchHandler.buffer_size <code>instance-attribute</code> <pre><code>buffer_size = buffer_size\n</code></pre> <code></code> opensearch_log.opensearch_handler.OpensearchHandler.flush_seconds <code>instance-attribute</code> <pre><code>flush_seconds = flush_seconds\n</code></pre> <code></code> opensearch_log.opensearch_handler.OpensearchHandler.index_name <code>instance-attribute</code> <pre><code>index_name = index_name\n</code></pre> <code></code> opensearch_log.opensearch_handler.OpensearchHandler.index_rotate <code>instance-attribute</code> <pre><code>index_rotate = IndexRotation[index_rotate]\n</code></pre> <code></code> opensearch_log.opensearch_handler.OpensearchHandler.opensearch_host <code>instance-attribute</code> <pre><code>opensearch_host = opensearch_host\n</code></pre> Functions <code></code> opensearch_log.opensearch_handler.OpensearchHandler.close <pre><code>close() -&gt; None\n</code></pre> <p>Flush the buffer on close.</p> <code></code> opensearch_log.opensearch_handler.OpensearchHandler.emit <pre><code>emit(record: LogRecord) -&gt; None\n</code></pre> <p>Emit a logging record in a processed format.</p> <code></code> opensearch_log.opensearch_handler.OpensearchHandler.flush <pre><code>flush() -&gt; None\n</code></pre> <p>Flush the buffer.</p> <code></code> opensearch_log.opensearch_handler.OpensearchHandler.is_connected <pre><code>is_connected() -&gt; bool\n</code></pre> <p>Return True if we can ping the OpenSearch.</p> <code></code> opensearch_log.opensearch_handler.OpensearchHandler.send_message <pre><code>send_message(message: Optional[str], record: LogRecord) -&gt; None\n</code></pre> <p>Send the log message to OpenSearch.</p>"},{"location":"reference/#opensearch_log.opensearch_handler-functions","title":"Functions","text":""},{"location":"reference/#opensearch_log.opensearch_handler.get_logger","title":"opensearch_log.opensearch_handler.get_logger","text":"<pre><code>get_logger(*args: Any, opensearch_host: str = DEFAULT_OPENSEARCH_HOST, index_name: str = DEFAULT_INDEX_NAME, index_rotate: Union[IndexRotation, str] = IndexRotation.DAILY, echo_stdout: bool = False, buffer_size: int = BUFFER_SIZE, flush_seconds: float = FLUSH_SECONDS, log_handler: Optional[BaseHandler] = None, **kwargs: Any) -&gt; Logger\n</code></pre> <p>Create a logger that stream logs to OpenSearch.</p>"},{"location":"reference/#opensearch_log.opensearch_handler.restore_logger","title":"opensearch_log.opensearch_handler.restore_logger","text":"<pre><code>restore_logger() -&gt; None\n</code></pre> <p>Flush and remove all handlers.</p>"},{"location":"reference/#opensearch_log.opensearch_handler-modules","title":"Modules","text":""},{"location":"reference/#opensearch_log.opensearch_serializer","title":"opensearch_log.opensearch_serializer","text":"<p>JSON serializer.</p>"},{"location":"reference/#opensearch_log.opensearch_serializer-classes","title":"Classes","text":""},{"location":"reference/#opensearch_log.opensearch_serializer.OpenSearchSerializer","title":"opensearch_log.opensearch_serializer.OpenSearchSerializer","text":"<p>             Bases: <code>JSONSerializer</code></p> <p>Override OpenSearch JSON serializer.</p> <p>Ignore serialization errors.</p> Functions <code></code> opensearch_log.opensearch_serializer.OpenSearchSerializer.default <pre><code>default(data: Any) -&gt; Any\n</code></pre> <p>Catch all serialization fails and fall to str.</p>"},{"location":"reference/#opensearch_log.stdout_handler","title":"opensearch_log.stdout_handler","text":"<p>JSON logging to stdout.</p>"},{"location":"reference/#opensearch_log.stdout_handler-classes","title":"Classes","text":""},{"location":"reference/#opensearch_log.stdout_handler.StdoutHandler","title":"opensearch_log.stdout_handler.StdoutHandler","text":"<p>             Bases: <code>BaseHandler</code></p> <p>Handler to send json log to stdout.</p> Functions <code></code> opensearch_log.stdout_handler.StdoutHandler.send_message <pre><code>send_message(message: Optional[str], record: LogRecord) -&gt; None\n</code></pre> <p>Send the log message to stdout.</p>"},{"location":"reference/#opensearch_log.stdout_handler-functions","title":"Functions","text":""},{"location":"reference/#opensearch_log.stdout_handler.add_stdout_json_handler","title":"opensearch_log.stdout_handler.add_stdout_json_handler","text":"<pre><code>add_stdout_json_handler(logger: Logger) -&gt; None\n</code></pre> <p>Add a stdout handler to the logger.</p>"},{"location":"reference/#opensearch_log.stdout_handler.get_logger","title":"opensearch_log.stdout_handler.get_logger","text":"<pre><code>get_logger(application: Optional[str] = None, branch: Optional[str] = None, *, level: int = logging.INFO, clear_handlers: bool = False, **values: Any) -&gt; Logger\n</code></pre> <p>Get a logger to send JSON logs to stdout.</p>"},{"location":"reference/#opensearch_log.stdout_handler-modules","title":"Modules","text":""}]}